/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.ControllerInt;
import Model.Atomo.FileData;
import Model.Atomo.Molecule;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/**
 *
 * @author daviddiaz
 */
public class FrameDifferentiator extends javax.swing.JFrame {

    /**
     * Creates new form FrameDifferentiator to show the tables.
     */
    private List<String> files = new ArrayList<>();
    private List<File> filesData = new ArrayList<>();
    private JPanel panelGeneric = new JPanel();
    private List<String> names = new ArrayList<>();
    private List<File> usedFiles = new ArrayList<>();
    private List<JTable> usedTables = new ArrayList<>();
    private List<String> keywordsUsed = new ArrayList<>();
    private List<List<String>> rows = new ArrayList<>();

    ControllerInt controller;
    JTable tableGeneric;

    public FrameDifferentiator(ControllerInt controller) {
        initComponents();
        this.controller = controller;
    }

    public FrameDifferentiator(List<String> files, List<File> filesData, ControllerInt controller) {
        initComponents();
        this.controller = controller;
        panelGeneric.setLayout(new GridLayout(0, 1));
        tabbedPane.addTab("Generic", panelGeneric);
        tabbedPane.setVisible(false);
        this.files = files;
        this.errorText.setVisible(true);
        this.filesData = filesData;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboOptions = new javax.swing.JComboBox<>();
        fieldKeyword = new javax.swing.JTextField();
        buttonAdd = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        deleteButtton = new javax.swing.JButton();
        buttonExportCSV = new javax.swing.JButton();
        errorText = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Search by keyword:");

        comboOptions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Starts with", "Ends with", "Contains", "Range" }));

        fieldKeyword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldKeywordActionPerformed(evt);
            }
        });

        buttonAdd.setText("Add");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        deleteButtton.setText("Reset");
        deleteButtton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButttonActionPerformed(evt);
            }
        });

        buttonExportCSV.setText("Export to CSV");
        buttonExportCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportCSVActionPerformed(evt);
            }
        });

        errorText.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        errorText.setForeground(new java.awt.Color(255, 0, 0));
        errorText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errorText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fieldKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 151, Short.MAX_VALUE)
                        .addComponent(buttonExportCSV)
                        .addGap(18, 18, 18)
                        .addComponent(deleteButtton))
                    .addComponent(tabbedPane))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAdd)
                    .addComponent(deleteButtton)
                    .addComponent(buttonExportCSV))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(errorText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method used to get the click event.
     *
     * @param evt
     */
    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        actionButtonAdd();
    }//GEN-LAST:event_buttonAddActionPerformed

    /**
     * Creates a table with every single keyword.
     *
     * @return the table.
     */
    private JTable initTablesDifferentiators() {
        JTable table = new JTable();
        table.setAutoCreateRowSorter(true);
        List<String> singleNames = new ArrayList<>();
        singleNames.add("Gaussian");
        singleNames.add("Atom");

        names.stream().filter((file) -> (!singleNames.contains(file))).forEachOrdered((file) -> {
            singleNames.add(file);
        });
        boolean[] canEditTry = new boolean[singleNames.size()];
        for (int i = 0; i < canEditTry.length; i++) {
            canEditTry[i] = false;
        }
        DefaultTableModel model = new DefaultTableModel(
                singleNames.toArray(new String[0]),
                0) {
            boolean[] canEdit = canEditTry;

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }

            @Override
            public Class<?> getColumnClass(int column) {
                Class<?> returnValue;
                if ((column >= 0) && (column < getColumnCount())) {
                    returnValue = getValueAt(0, column).getClass();
                } else {
                    returnValue = Object.class;
                }

                return returnValue;

            }
        ;
        };
        table.setModel(model);
        for (int i = 0; i < table.getColumnCount(); i++) {
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(JLabel.CENTER);
            table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) table.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(0);
        table.getTableHeader().setFont(new Font("Arial", Font.BOLD, 12));
        return table;
    }

    /**
     * Method used to add rows to the table.
     *
     * @param table the table that we want to add rows to.
     * @return table with rows added.
     */
    private JTable addRowsToTable(JTable table) {

        JTable tableWithElements = table;
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        List<FileData> fileData = this.controller.getFileData(usedFiles);
        String fileNameError = "";
        boolean correcto = false;
        for (String name : names) {
            salir:
            if (!correcto) {
                for (FileData fileData1 : fileData) {
                    if (fileData1.getFileName().equals(name)) {
                        fileNameError = "";
                        break salir;
                    } else {
                        correcto = true;
                        fileNameError = name;
                    }
                }
            }
        }
        if (fileData.size() == usedFiles.size()) {
            errorText.setText("");
            List<Object> data = new ArrayList<>();
            for (int i = 0; i < fileData.get(0).getAtoms().size(); i++) {
                data.clear();
                for (int j = 1; j < fileData.size() + 1; j++) {
                    if (j == 1) {
                        data.add(fileData.get(j - 1).getAtoms().get(i).getGaussianData());
                        data.add(fileData.get(j - 1).getAtoms().get(i).getAtom());
                    }
                    data.add(fileData.get(j - 1).getAtoms().get(i).getIsotropic());
                }
                model.addRow(data.toArray(new Object[0]));
            }
            return tableWithElements;
        } else {
            keywordsUsed.remove(fieldKeyword.getText());
            errorText.setText("Syntax error. Please, check the file " + fileNameError + ".");
            return table;
        }
    }

    /**
     * Add the used files to a List.F
     */
    private void getUsedFiles() {
        switch (String.valueOf(comboOptions.getSelectedItem())) {
            case "Starts with":
                for (int i = 0; i < files.size(); i++) {
                    String filename = files.get(i).contains(".log") ? files.get(i).replace(".log", "") : files.get(i).replace(".txt", "");
                    if (filename.startsWith(fieldKeyword.getText())) {
                        usedFiles.add(filesData.get(i));
                        if (!names.contains(filename)) {
                            names.add(filename);
                        }
                    }
                }
                break;
            case "Ends with":
                for (int i = 0; i < files.size(); i++) {
                    String filename = files.get(i).contains(".log") ? files.get(i).replace(".log", "") : files.get(i).replace(".txt", "");
                    if (filename.endsWith(fieldKeyword.getText())) {
                        usedFiles.add(filesData.get(i));
                        names.add(filename);
                    }
                }
                break;
            case "Contains":
                for (int i = 0; i < files.size(); i++) {
                    String filename = files.get(i).contains(".log") ? files.get(i).replace(".log", "") : files.get(i).replace(".txt", "");
                    if (filename.contains(fieldKeyword.getText())) {
                        usedFiles.add(filesData.get(i));
                        names.add(filename);
                    }
                }
                break;
            default:
                break;
        }
    }

    /**
     * Clears all the tables.
     *
     * @param evt
     */
    private void deleteButttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButttonActionPerformed
        errorText.setText("");
        errorText.setForeground(Color.red);
        keywordsUsed.clear();
        tabbedPane.removeAll();
        tabbedPane.addTab("Generic", panelGeneric);
        tabbedPane.setVisible(false);
        panelGeneric.removeAll();
        tableGeneric = null;
    }//GEN-LAST:event_deleteButttonActionPerformed

    /**
     * Method used to export the tables to a CSV file
     *
     * @param evt
     */
    private void buttonExportCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportCSVActionPerformed
        errorText.setForeground(Color.red);
        String folder = "";
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int option = fileChooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if (!file.exists()) {
                new File(file.getAbsolutePath()).mkdir();
            }
            folder = file.getAbsolutePath();
        }

        usedTables.add(tableGeneric);
        keywordsUsed.add("Generic");

        if (usedTables.size() > 0) {
            for (int i = 0; i < keywordsUsed.size(); i++) {
                List<String[]> datas = new ArrayList<>();
                TableModel model = usedTables.get(i).getModel();
                String[] columnNames = new String[model.getColumnCount()];
                for (int j = 0; j < model.getColumnCount(); j++) {
                    columnNames[j] = model.getColumnName(j);
                }
                datas.add(columnNames);
                for (int k = 0; k < model.getRowCount(); k++) {
                    String[] data = new String[model.getColumnCount()];
                    for (int j = 0; j < model.getColumnCount(); j++) {
                        if (model.getValueAt(k, j) != null && model.getValueAt(k, j).toString().trim().length() != 0) {
                            data[j] = String.valueOf(model.getValueAt(k, j));
                        }
                    }
                    datas.add(data);
                }
                if (this.controller.writeCSV(datas, folder, keywordsUsed.get(i))) {
                    errorText.setForeground(Color.green);
                    errorText.setText("All files has been created.");
                }
            }
        }
    }//GEN-LAST:event_buttonExportCSVActionPerformed

    /**
     * The same function that button add.
     *
     * @param evt
     */
    private void fieldKeywordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldKeywordActionPerformed
        actionButtonAdd();
    }//GEN-LAST:event_fieldKeywordActionPerformed

    /**
     * Creates the "generic" table with all the info from the other tables.
     *
     * @param usedFiles
     */
    private void genericTable(List<File> usedFiles) {
        Molecule molecule = this.controller.getMolecule(usedFiles, fieldKeyword.getText());
        String[] values = new String[keywordsUsed.size() + 2];
        values[0] = "Gaussian";
        values[1] = "Atom";
        for (int i = 2; i <= keywordsUsed.size() + 1; i++) {
            values[i] = keywordsUsed.get(i - 2);
        }

        if (tableGeneric == null) {
            initGenericTable(values);
            addElementsToGeneric(molecule);
            JScrollPane scrollpaneGeneric = new JScrollPane(tableGeneric, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            panelGeneric.add(scrollpaneGeneric);
        } else {
            panelGeneric.removeAll();
            initGenericTable(values);
            addElementsToGeneric(molecule);
            JScrollPane scrollpaneGeneric = new JScrollPane(tableGeneric, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            panelGeneric.add(scrollpaneGeneric);

        }
        TableColumn column = null;
        for (int i = 0; i < tableGeneric.getColumnCount(); i++) {
            if (i == 0 || i == 1) {
                column = tableGeneric.getColumnModel().getColumn(i);
                column.setMinWidth(100);
            } else {
                column = tableGeneric.getColumnModel().getColumn(i);
                column.setMinWidth(200);
            }
        }
        tableGeneric.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

    }

    /**
     * Initializes the generic table.
     *
     * @param values are the "keywords" used.
     */
    private void initGenericTable(String[] values) {
        tableGeneric = new JTable();

        boolean[] canEditTry = new boolean[keywordsUsed.size() + 2];
        for (int i = 0; i < canEditTry.length; i++) {
            canEditTry[i] = false;
        }

        DefaultTableModel modelGeneric = new DefaultTableModel(values, 0) {
            boolean[] canEdit = canEditTry;

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }

            @Override
            public Class<?> getColumnClass(int column) {
                Class<?> returnValue;
                if ((column >= 0) && (column < getColumnCount())) {
                    returnValue = getValueAt(0, column).getClass();
                } else {
                    returnValue = Object.class;
                }

                return returnValue;

            }
        ;
        };
        tableGeneric.setAutoCreateRowSorter(true);
        tableGeneric.setModel(modelGeneric);
        //Center columns
        for (int i = 0; i < tableGeneric.getColumnCount(); i++) {
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(JLabel.CENTER);
            tableGeneric.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) tableGeneric.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(0);
        tableGeneric.getTableHeader().setFont(new Font("Arial", Font.BOLD, 12));
    }

    /**
     * Add all the elements to the generic table.
     *
     * @param molecule contains all the necessary info about the molecules.
     */
    private void addElementsToGeneric(Molecule molecule) {

        DefaultTableModel model = (DefaultTableModel) tableGeneric.getModel();
        List<List<String>> auxList = new ArrayList<>(rows);
        rows.clear();

        for (int i = 0; i < molecule.getResult().size(); i++) {
            if (keywordsUsed.size() == 1) {
                List<String> values = new ArrayList<>();
                values.add(molecule.getResult().get(i).getGaussian());
                values.add(molecule.getResult().get(i).getAtom());
                values.add(String.valueOf(molecule.getResult().get(i).getValue()));
                rows.add(values);
            } else {
                List<String> values = new ArrayList<>(auxList.get(i));
                values.add(String.valueOf(molecule.getResult().get(i).getValue()));
                rows.add(values);
            }
        }

        rows.forEach((row) -> {
            model.addRow(row.toArray());
        });

    }

    /**
     * This methos is used by buttonAdd and textField.s
     */
    private void actionButtonAdd() {
        errorText.setForeground(Color.red);
        if (fieldKeyword.getText().length() > 0) {
            if (!keywordsUsed.contains(fieldKeyword.getText())) {
                keywordsUsed.add(fieldKeyword.getText());
            }
            names.clear();
            usedFiles.clear();
            getUsedFiles();
            if (!usedFiles.isEmpty()) {
                errorText.setText("");
                JTable table = addRowsToTable(initTablesDifferentiators());
                if (table.getRowCount() != 0) {
                    JPanel panel = new JPanel();
                    tabbedPane.setVisible(true);
                    panel.setLayout(new GridLayout(0, 1));
                    JScrollPane scrollpane = new JScrollPane(table, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
                    TableColumn column = null;
                    for (int i = 0; i < table.getColumnCount(); i++) {
                        if (i == 0 || i == 1) {
                            column = table.getColumnModel().getColumn(i);
                            column.setMinWidth(100);
                        } else {
                            column = table.getColumnModel().getColumn(i);
                            column.setMinWidth(300);
                        }
                    }
                    table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                    panel.add(scrollpane);
                    tabbedPane.addTab(fieldKeyword.getText(), panel);
                    tabbedPane.setSelectedIndex(tabbedPane.getTabCount() - 1);
                    genericTable(usedFiles);
                    usedTables.add(table);
                    revalidate();
                    pack();
                }else{
                    errorText.setText("Couldn't find any file with the provided keyword.");
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonExportCSV;
    private javax.swing.JComboBox<String> comboOptions;
    private javax.swing.JButton deleteButtton;
    private javax.swing.JLabel errorText;
    private javax.swing.JTextField fieldKeyword;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
}
